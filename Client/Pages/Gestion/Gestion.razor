@page "/gestion"
@using System.IdentityModel.Tokens.Jwt;
@using BlazorApp.Shared;
@using System.Security.Claims;

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http

<PageTitle>Gestion</PageTitle>

<EditForm Model="dataSwanShop" OnValidSubmit="HandleGeneral" Context="EditForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @*    <div class="row mt-4">
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
    <h5><label for="logo">Logo</label></h5>
    <InputText Id="logo" Class="form-control" @bind-Value="general.Logo" />
    <ValidationMessage For="@(() => general.Logo)" />
    </div>*@
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="title">Page title</label></h5>
        <InputText Id="index-title" Class="form-control" @bind-Value="dataPageTitle" />
        @*        <ValidationMessage For="@(() => general.PageTitle)" />*@
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="carouselStyle">Carousel style</label></h5>
        <InputText Id="index-carouselStyle" Class="form-control" @bind-Value="_carouselStyle" />
        @*<ValidationMessage For="@(() => general.SubTitle)" />*@
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="carouselShowArrows">Carousel ShowArrows</label></h5>
        <InputCheckbox Id="index-carouselShowArrows" @bind-Value="_carouselShowArrows"></InputCheckbox>
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="carouselShowBullets">Carousel ShowBullets</label></h5>
        <InputCheckbox Id="index-carouselShowBullets" @bind-Value="_carouselShowBullets"></InputCheckbox>
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="carouselEnableSwipeGesture">Carousel EnableSwipeGesture</label></h5>
        <InputCheckbox Id="index-carouselEnableSwipeGesture" @bind-Value="_carouselEnableSwipeGesture"></InputCheckbox>
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="carouselAutoCycle">Carousel AutoCycle</label></h5>
        <InputCheckbox Id="index-carouselAutoCycle" @bind-Value="_carouselAutoCycle"></InputCheckbox>
    </div>
    @*</div>*@
    @*    <div class="row">
    <div class="form-group col-lg-12 col-md-12 col-sm-12">
    <h5><label for="subtitle">Image background banner</label></h5>
    <InputText Id="page-subtitle" Class="form-control" @bind-Value="general.ImageBGBanner" />
    <ValidationMessage For="@(() => general.ImageBGBanner)" />
    </div>
    </div>
    <div class="row">
    <div class="form-group col-lg-12 col-md-12 col-sm-12">
    <h5><label for="subtitle">Image background banner :</label>&nbsp;&nbsp;&nbsp;<ColorSelector InColor="@general.BackgroundColor" ReturnedColor="ColorChange"></ColorSelector></h5>
    <InputText Id="page-subtitle" Class="form-control" @bind-Value="general.ImageBGBanner" />
    <ValidationMessage For="@(() => general.BackgroundColor)" />
    </div>
    </div>*@

    <!---------------------------     Section Albums      ------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section Albums</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-6 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>
    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionAlbums" />
    <ValidationMessage For="@(() => general.PositionAlbums)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-6 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-6 form-control w-100 justify-content-start" @bind-Value="general.ActiveAlbums" />
    <ValidationMessage For="@(() => general.ActiveAlbums)" />

    <label class="col-lg-6 col-md-6 col-sm-0 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <!---------------------------     Section List Videos      ------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section Videos</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>

    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionVideos" />
    <ValidationMessage For="@(() => general.PositionVideos)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-12 form-control w-100 justify-content-start" @bind-Value="general.ActiveVideos" />
    <ValidationMessage For="@(() => general.ActiveVideos)" />

    <label class="col-lg-6 col-md-6 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <!---------------------------     Section List Photos      ------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section Photos</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>
    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionPhotos" />
    <ValidationMessage For="@(() => general.PositionPhotos)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-12 form-control w-100 justify-content-start" @bind-Value="general.ActivePhotos" />
    <ValidationMessage For="@(() => general.ActivePhotos)" />

    <label class="col-lg-6 col-md-6 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <!---------------------------     Section About      ------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section About</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>
    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionAbout" />
    <ValidationMessage For="@(() => general.PositionAbout)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-12 form-control w-100 justify-content-start" @bind-Value="general.ActiveAbout" />
    <ValidationMessage For="@(() => general.ActiveAbout)" />

    <label class="col-lg-6 col-md-6 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">
    <label class="col-lg-2 col-md-4 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="image-bgabout">Img background About</label>
    <InputText Id="image-bgabout" Class="col-lg-10 col-md-8 col-sm-12 form-control w-100" @bind-Value="general.ImageBGAbout" />
    <ValidationMessage For="@(() => general.ImageBGAbout)" />
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <!---------------------------     Section Quote   --------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section Quote</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>
    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionQuote" />
    <ValidationMessage For="@(() => general.PositionQuote)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-12 form-control w-100 justify-content-start" @bind-Value="general.ActiveQuote" />
    <ValidationMessage For="@(() => general.ActiveQuote)" />

    <label class="col-lg-6 col-md-6 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <!---------------------------     Section Service   --------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section Service</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>
    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionService" />
    <ValidationMessage For="@(() => general.PositionService)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-12 form-control w-100 justify-content-start" @bind-Value="general.ActiveService" />
    <ValidationMessage For="@(() => general.ActiveService)" />

    <label class="col-lg-6 col-md-6 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">
    <label class="col-lg-2 col-md-4 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="image-bgabout">Img background Service</label>
    <InputText Id="image-bgbanner" Class="col-lg-10 col-md-8 col-sm-12 form-control w-100" @bind-Value="general.ImageBGService" />
    <ValidationMessage For="@(() => general.ImageBGService)" />
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <button type="submit" class="btn btn-primary btn-sm">Submit</button>
</EditForm>

@code
{
    private bool ShowErrors;
    private string Error = "";

    private SwanShop dataSwanShop { get; set; } = new SwanShop();

    private string dataPageTitle = string.Empty;
    private string _carouselStyle = string.Empty;
    private bool _carouselShowArrows = false;
    private bool _carouselShowBullets = false;
    private bool _carouselEnableSwipeGesture = false;
    private bool _carouselAutoCycle = false;

    protected override async Task OnInitializedAsync()
    {
        GestionAuthorization();

        dataSwanShop = await Http.GetFromJsonAsync<SwanShop>($"/api/GetData");
        if (dataSwanShop != null && dataSwanShop.Configs != null && dataSwanShop.Configs.Count > 0)
        {
            var indexConfigs = dataSwanShop.Configs.Where(x => string.IsNullOrEmpty(x.Route) || x.Route.ToLower() == "Index");
            if (indexConfigs.Count() > 0)
            {
                foreach (var item in indexConfigs)
                {
                    if (item.Properties != null && item.Properties.Count() > 0)
                    {
                        var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                        if (configPageTitle != null)
                            dataPageTitle = configPageTitle.Value;
                    }

                    if (item.SpecificIdProperties != null && item.SpecificIdProperties.Count() > 0)
                    {
                        var configCarousel = item.SpecificIdProperties.Where(x => x.Id == ClsCommon.IndexCarouselId).FirstOrDefault();
                        if (configCarousel != null && configCarousel.Properties != null && configCarousel.Properties.Count() > 0)
                        {
                            _carouselStyle = configCarousel.Properties.Where(x => x.Name == "Style").FirstOrDefault().Value ?? string.Empty;
                            _carouselShowArrows = configCarousel.Properties.Where(x => x.Name == "ShowArrows").FirstOrDefault().Value == "1";
                            _carouselShowBullets = configCarousel.Properties.Where(x => x.Name == "ShowBullets").FirstOrDefault().Value == "1";
                            _carouselEnableSwipeGesture = configCarousel.Properties.Where(x => x.Name == "EnableSwipeGesture").FirstOrDefault().Value == "1";
                            _carouselAutoCycle = configCarousel.Properties.Where(x => x.Name == "AutoCycle").FirstOrDefault().Value == "1";
                        }
                    }
                }
            }
        }
    }

    private async void GestionAuthorization()
    {
        var authState = await ((ApiAuthenticationStateProvider)authenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        var refreshToken = await localStorage.GetItemAsync<string>($"refreshToken");

        //Si non, redirect user to login
        if ((user == null || user.Identity == null) && refreshToken == null)
            NavigationManager.NavigateTo("/login");
        else if (!user.Identity.IsAuthenticated && refreshToken != null)
        {
            var claims = ClsCommon.ParseClaimsFromJwt(refreshToken);
            var valueName = claims.Where(x => x.Type == ClaimTypes.Name).FirstOrDefault();
            var userNameRefreshToken = valueName != null ? valueName.Value : string.Empty;

            var result = await Http.GetStringAsync($"/api/RefreshToken?userName={userNameRefreshToken}&refreshToken={refreshToken}");

            if (result.StartsWith("ERR|"))
            {
                //Erreur refresh automatique, redirect user to login
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var res = result.Split("||REF||");
                if (res != null && res.Count() == 2)
                {
                    await localStorage.SetItemAsync($"accessToken", res[0]);
                    await localStorage.SetItemAsync($"refreshToken", res[1]);

                    ((ApiAuthenticationStateProvider)authenticationStateProvider).MarkUserAsAuthenticated(userNameRefreshToken);
                }
            }
        }
    }

    private async Task HandleGeneral()
    {
        //Message = "Updating general information ...";

        var accessToken = await localStorage.GetItemAsync<string>("accessToken");
        if (!string.IsNullOrEmpty(accessToken))
        {
            if (!string.IsNullOrEmpty(dataPageTitle))
            {
                var indexConfigs = dataSwanShop.Configs.Where(x => string.IsNullOrEmpty(x.Route) || x.Route.ToLower() == "Index");
                if (indexConfigs.Count() > 0)
                {
                    foreach (var item in indexConfigs)
                    {
                        if (item.Properties != null)
                        {
                            var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                            if (configPageTitle != null)
                            {
                                configPageTitle.Value = dataPageTitle;
                                configPageTitle.HasChange = "1";
                            }
                        }

                        if (item.SpecificIdProperties != null)
                        {
                            var configCarousel = item.SpecificIdProperties.Where(x => x.Id == ClsCommon.IndexCarouselId).FirstOrDefault();
                            if (configCarousel != null && configCarousel.Properties != null && configCarousel.Properties.Count() > 0)
                            {
                                var configCarouselStyle = configCarousel.Properties.Where(x => x.Name == "Style").FirstOrDefault();
                                if (configCarouselStyle != null)
                                {
                                    configCarouselStyle.Value = _carouselStyle;
                                    configCarouselStyle.HasChange = "1";
                                }
                                
                                var configCarouselShowArrows = configCarousel.Properties.Where(x => x.Name == "ShowArrows").FirstOrDefault();
                                if (configCarouselShowArrows != null)
                                {
                                    configCarouselShowArrows.Value = _carouselShowArrows ? "1" : "0";
                                    configCarouselShowArrows.HasChange = "1";
                                }

                                var configCarouselShowBullets = configCarousel.Properties.Where(x => x.Name == "ShowBullets").FirstOrDefault();
                                if (configCarouselShowBullets != null)
                                {
                                    configCarouselShowBullets.Value = _carouselShowBullets ? "1" : "0";
                                    configCarouselShowBullets.HasChange = "1";
                                }

                                var configCarouselEnableSwipeGesture = configCarousel.Properties.Where(x => x.Name == "EnableSwipeGesture").FirstOrDefault();
                                if (configCarouselEnableSwipeGesture != null)
                                {
                                    configCarouselEnableSwipeGesture.Value = _carouselEnableSwipeGesture ? "1" : "0";
                                    configCarouselEnableSwipeGesture.HasChange = "1";
                                }

                                var configCarouselAutoCycle = configCarousel.Properties.Where(x => x.Name == "AutoCycle").FirstOrDefault();
                                if (configCarouselAutoCycle != null)
                                {
                                    configCarouselAutoCycle.Value = _carouselAutoCycle ? "1" : "0";
                                    configCarouselAutoCycle.HasChange = "1";
                                }
                            }
                        }
                    }
                }
            }

            var resultMessage = await Http.PostAsJsonAsync<SwanShop>($"/api/UpdateData?accessToken={accessToken}", dataSwanShop);
        }

        //var result = JsonSerializer.Deserialize<BaseResult>(await resultMessage.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        //Message = result.Successful ? "General information updated" : result.Error;
    }
}