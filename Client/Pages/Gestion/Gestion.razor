@page "/gestion"
@using System.IdentityModel.Tokens.Jwt;
@using BlazorApp.Shared;
@using System.Security.Claims;

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http

<PageTitle>Gestion</PageTitle>

<EditForm Model="dataSwanShop" OnValidSubmit="HandleGeneral" Context="EditForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @*    <div class="row mt-4">
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
    <h5><label for="logo">Logo</label></h5>
    <InputText Id="logo" Class="form-control" @bind-Value="general.Logo" />
    <ValidationMessage For="@(() => general.Logo)" />
    </div>*@
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="title">Index / Page title</label></h5>
        <InputText Id="index-title" Class="form-control" @bind-Value="indexPageTitle" />
    </div>

    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="shopName">Index / Shop name</label></h5>
        <InputText Id="index-shopName" Class="form-control" @bind-Value="_shopName" />
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="shopAddress">Index / Address</label></h5>
        <InputText Id="index-shopAddress" Class="form-control" @bind-Value="_shopAddress" />
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="shopTelephone">Index / Telephone</label></h5>
        <InputText Id="index-shopTelephone" Class="form-control" @bind-Value="_shopTelephone" />
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="shopMail">Index / Mail</label></h5>
        <InputText Id="index-shopMail" Class="form-control" @bind-Value="_shopMail" />
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="shopLinkFacebook">Index / Link Facebook</label></h5>
        <InputText Id="index-linkfb" Class="form-control" @bind-Value="_shopLinkFacebook" />
    </div>
        <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="shopLinkInstagram">Index / Link Instagram</label></h5>
        <InputText Id="index-linkig" Class="form-control" @bind-Value="_shopLinkInstagram" />
    </div>
        <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="shopLinkTwitter">Index / Link Twitter</label></h5>
        <InputText Id="index-linktw" Class="form-control" @bind-Value="_shopLinkTwitter" />
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="shopLinkLinkedIn">Index / Link LinkedIn</label></h5>
        <InputText Id="index-linkli" Class="form-control" @bind-Value="_shopLinkLinkedIn" />
    </div>

    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="carouselStyle">Carousel style</label></h5>
        <InputText Id="index-carouselStyle" Class="form-control" @bind-Value="_carouselStyle" />
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="carouselShowArrows">Carousel ShowArrows</label></h5>
        <InputCheckbox Id="index-carouselShowArrows" @bind-Value="_carouselShowArrows"></InputCheckbox>
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="carouselShowBullets">Carousel ShowBullets</label></h5>
        <InputCheckbox Id="index-carouselShowBullets" @bind-Value="_carouselShowBullets"></InputCheckbox>
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="carouselEnableSwipeGesture">Carousel EnableSwipeGesture</label></h5>
        <InputCheckbox Id="index-carouselEnableSwipeGesture" @bind-Value="_carouselEnableSwipeGesture"></InputCheckbox>
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="carouselAutoCycle">Carousel AutoCycle</label></h5>
        <InputCheckbox Id="index-carouselAutoCycle" @bind-Value="_carouselAutoCycle"></InputCheckbox>
    </div>

    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="title">About / Page title</label></h5>
        <InputText Id="index-title" Class="form-control" @bind-Value="aboutPageTitle" />
    </div>

    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="title">Contact / Page title</label></h5>
        <InputText Id="index-title" Class="form-control" @bind-Value="contactPageTitle" />
    </div>

    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="title">ShopSingle / Page title</label></h5>
        <InputText Id="index-title" Class="form-control" @bind-Value="shopSinglePageTitle" />
    </div>

    <div class="form-group col-lg-4 col-md-4 col-sm-12">
        <h5><label for="title">Shop / Page title</label></h5>
        <InputText Id="index-title" Class="form-control" @bind-Value="shopPageTitle" />
    </div>

    @*</div>*@
    @*    <div class="row">
    <div class="form-group col-lg-12 col-md-12 col-sm-12">
    <h5><label for="subtitle">Image background banner</label></h5>
    <InputText Id="page-subtitle" Class="form-control" @bind-Value="general.ImageBGBanner" />
    <ValidationMessage For="@(() => general.ImageBGBanner)" />
    </div>
    </div>
    <div class="row">
    <div class="form-group col-lg-12 col-md-12 col-sm-12">
    <h5><label for="subtitle">Image background banner :</label>&nbsp;&nbsp;&nbsp;<ColorSelector InColor="@general.BackgroundColor" ReturnedColor="ColorChange"></ColorSelector></h5>
    <InputText Id="page-subtitle" Class="form-control" @bind-Value="general.ImageBGBanner" />
    <ValidationMessage For="@(() => general.BackgroundColor)" />
    </div>
    </div>*@

    <!---------------------------     Section Albums      ------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section Albums</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-6 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>
    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionAlbums" />
    <ValidationMessage For="@(() => general.PositionAlbums)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-6 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-6 form-control w-100 justify-content-start" @bind-Value="general.ActiveAlbums" />
    <ValidationMessage For="@(() => general.ActiveAlbums)" />

    <label class="col-lg-6 col-md-6 col-sm-0 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <!---------------------------     Section List Videos      ------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section Videos</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>

    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionVideos" />
    <ValidationMessage For="@(() => general.PositionVideos)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-12 form-control w-100 justify-content-start" @bind-Value="general.ActiveVideos" />
    <ValidationMessage For="@(() => general.ActiveVideos)" />

    <label class="col-lg-6 col-md-6 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <!---------------------------     Section List Photos      ------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section Photos</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>
    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionPhotos" />
    <ValidationMessage For="@(() => general.PositionPhotos)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-12 form-control w-100 justify-content-start" @bind-Value="general.ActivePhotos" />
    <ValidationMessage For="@(() => general.ActivePhotos)" />

    <label class="col-lg-6 col-md-6 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <!---------------------------     Section About      ------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section About</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>
    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionAbout" />
    <ValidationMessage For="@(() => general.PositionAbout)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-12 form-control w-100 justify-content-start" @bind-Value="general.ActiveAbout" />
    <ValidationMessage For="@(() => general.ActiveAbout)" />

    <label class="col-lg-6 col-md-6 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">
    <label class="col-lg-2 col-md-4 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="image-bgabout">Img background About</label>
    <InputText Id="image-bgabout" Class="col-lg-10 col-md-8 col-sm-12 form-control w-100" @bind-Value="general.ImageBGAbout" />
    <ValidationMessage For="@(() => general.ImageBGAbout)" />
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <!---------------------------     Section Quote   --------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section Quote</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>
    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionQuote" />
    <ValidationMessage For="@(() => general.PositionQuote)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-12 form-control w-100 justify-content-start" @bind-Value="general.ActiveQuote" />
    <ValidationMessage For="@(() => general.ActiveQuote)" />

    <label class="col-lg-6 col-md-6 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <!---------------------------     Section Service   --------------------------------------------->
    @*                <div class="row">
    <div class="card border-0 col-lg-12 col-md-12 col-sm-12">
    <div class="card-body">
    <h4 class="card-title">Section Service</h4>
    <div class="form-group form-inline mx-0 mt-0 pt-0 pb-0">
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Position</label>
    <InputSelectEnum Class="col-lg-1 col-md-1 col-sm-12 form-control w-100" @bind-Value="general.PositionService" />
    <ValidationMessage For="@(() => general.PositionService)" />

    <label class="col-lg-2 col-md-2 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>

    <label class="col-lg-1 col-md-1 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">Active</label>
    <InputCheckbox Id="about-details" Class="col-lg-1 col-md-1 col-sm-12 form-control w-100 justify-content-start" @bind-Value="general.ActiveService" />
    <ValidationMessage For="@(() => general.ActiveService)" />

    <label class="col-lg-6 col-md-6 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="about-details">&nbsp;</label>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 d-xl-inline-flex d-md-inline-flex mx-lg-1 mx-md-1 mx-sm-1 mt-lg-1 mt-md-1 mt-sm-1">
    <label class="col-lg-2 col-md-4 col-sm-12 justify-content-lg-end justify-content-md-start justify-content-sm-between" for="image-bgabout">Img background Service</label>
    <InputText Id="image-bgbanner" Class="col-lg-10 col-md-8 col-sm-12 form-control w-100" @bind-Value="general.ImageBGService" />
    <ValidationMessage For="@(() => general.ImageBGService)" />
    </div>
    </div>
    </div>
    </div>
    </div>*@
    <button type="submit" class="btn btn-primary btn-sm">Submit</button>
</EditForm>

@code
{
    private bool ShowErrors;
    private string Error = "";

    private SwanShop dataSwanShop { get; set; } = new SwanShop();

    private string indexPageTitle = string.Empty;
    private string _shopName = string.Empty;
    private string _shopAddress = string.Empty;
    private string _shopTelephone = string.Empty;
    private string _shopMail = string.Empty;

    private string _shopLinkFacebook = string.Empty;
    private string _shopLinkInstagram = string.Empty;
    private string _shopLinkTwitter = string.Empty;
    private string _shopLinkLinkedIn = string.Empty;


    private string aboutPageTitle = string.Empty;
    private string contactPageTitle = string.Empty;
    private string shopPageTitle = string.Empty;
    private string shopSinglePageTitle = string.Empty;

    private string _carouselStyle = string.Empty;
    private bool _carouselShowArrows = false;
    private bool _carouselShowBullets = false;
    private bool _carouselEnableSwipeGesture = false;
    private bool _carouselAutoCycle = false;

    protected override async Task OnInitializedAsync()
    {
        GestionAuthorization();

        dataSwanShop = await Http.GetFromJsonAsync<SwanShop>($"/api/GetData");
        if (dataSwanShop != null && dataSwanShop.Configs != null && dataSwanShop.Configs.Count > 0)
        {
            var routeConfigs = dataSwanShop.Configs.Where(x => !string.IsNullOrEmpty(x.Route));
            if (routeConfigs.Count() > 0)
            {
                foreach (var item in routeConfigs)
                {
                    if (item != null)
                    {
                        switch (item.Route)
                        {
                            case "Shop":

                                if (item.Properties != null && item.Properties.Count() > 0)
                                {
                                    var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                                    if (configPageTitle != null)
                                        shopPageTitle = configPageTitle.Value;
                                }

                                break;
                            case "ShopSingle":

                                if (item.Properties != null && item.Properties.Count() > 0)
                                {
                                    var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                                    if (configPageTitle != null)
                                        shopSinglePageTitle = configPageTitle.Value;
                                }

                                break;
                            case "Contact":

                                if (item.Properties != null && item.Properties.Count() > 0)
                                {
                                    var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                                    if (configPageTitle != null)
                                        contactPageTitle = configPageTitle.Value;
                                }

                                break;
                            case "About":

                                if (item.Properties != null && item.Properties.Count() > 0)
                                {
                                    var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                                    if (configPageTitle != null)
                                        aboutPageTitle = configPageTitle.Value;
                                }

                                break;
                            default:

                                if (item.Properties != null && item.Properties.Count() > 0)
                                {
                                    var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                                    if (configPageTitle != null)
                                        indexPageTitle = configPageTitle.Value;

                                    var configShopName = item.Properties.Where(x => x.Name == "ShopName").FirstOrDefault();
                                    if (configShopName != null)
                                        _shopName = configShopName.Value;

                                    var configShopAddress = item.Properties.Where(x => x.Name == "ShopAddress").FirstOrDefault();
                                    if (configShopAddress != null)
                                        _shopAddress = configShopAddress.Value;

                                    var configShopTel = item.Properties.Where(x => x.Name == "ShopTel").FirstOrDefault();
                                    if (configShopTel != null)
                                        _shopTelephone = configShopTel.Value;

                                    var configShopMail = item.Properties.Where(x => x.Name == "ShopMail").FirstOrDefault();
                                    if (configShopMail != null)
                                        _shopMail = configShopMail.Value;

                                    var configShopLinkFacebook = item.Properties.Where(x => x.Name == "ShopLinkFB").FirstOrDefault();
                                    if (configShopLinkFacebook != null)
                                        _shopLinkFacebook = configShopLinkFacebook.Value;

                                    var configShopLinkInstagram = item.Properties.Where(x => x.Name == "ShopLinkIG").FirstOrDefault();
                                    if (configShopLinkInstagram != null)
                                        _shopLinkInstagram = configShopLinkInstagram.Value;

                                    var configShopLinkTwitter = item.Properties.Where(x => x.Name == "ShopLinkTW").FirstOrDefault();
                                    if (configShopLinkTwitter != null)
                                        _shopLinkTwitter = configShopLinkTwitter.Value;

                                    var configShopLinkLinkedIn = item.Properties.Where(x => x.Name == "ShopLinkLI").FirstOrDefault();
                                    if (configShopLinkLinkedIn != null)
                                        _shopLinkLinkedIn = configShopLinkLinkedIn.Value;
                                }

                                if (item.SpecificIdProperties != null && item.SpecificIdProperties.Count() > 0)
                                {
                                    var configCarousel = item.SpecificIdProperties.Where(x => x.Id == ClsCommon.IndexCarouselId).FirstOrDefault();
                                    if (configCarousel != null && configCarousel.Properties != null && configCarousel.Properties.Count() > 0)
                                    {
                                        _carouselStyle = configCarousel.Properties.Where(x => x.Name == "Style").FirstOrDefault().Value ?? string.Empty;
                                        _carouselShowArrows = configCarousel.Properties.Where(x => x.Name == "ShowArrows").FirstOrDefault().Value == "1";
                                        _carouselShowBullets = configCarousel.Properties.Where(x => x.Name == "ShowBullets").FirstOrDefault().Value == "1";
                                        _carouselEnableSwipeGesture = configCarousel.Properties.Where(x => x.Name == "EnableSwipeGesture").FirstOrDefault().Value == "1";
                                        _carouselAutoCycle = configCarousel.Properties.Where(x => x.Name == "AutoCycle").FirstOrDefault().Value == "1";
                                    }
                                }

                                break;

                        }
                    }
                }
            }

        }
    }

    private async void GestionAuthorization()
    {
        var authState = await ((ApiAuthenticationStateProvider)authenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        var refreshToken = await localStorage.GetItemAsync<string>($"refreshToken");

        //Si non, redirect user to login
        if ((user == null || user.Identity == null) && refreshToken == null)
            NavigationManager.NavigateTo("/login");
        else if (!user.Identity.IsAuthenticated && refreshToken != null)
        {
            var claims = ClsCommon.ParseClaimsFromJwt(refreshToken);
            var valueName = claims.Where(x => x.Type == ClaimTypes.Name).FirstOrDefault();
            var userNameRefreshToken = valueName != null ? valueName.Value : string.Empty;

            var result = await Http.GetStringAsync($"/api/RefreshToken?userName={userNameRefreshToken}&refreshToken={refreshToken}");

            if (result.StartsWith("ERR|"))
            {
                //Erreur refresh automatique, redirect user to login
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var res = result.Split("||REF||");
                if (res != null && res.Count() == 2)
                {
                    await localStorage.SetItemAsync($"accessToken", res[0]);
                    await localStorage.SetItemAsync($"refreshToken", res[1]);

                    ((ApiAuthenticationStateProvider)authenticationStateProvider).MarkUserAsAuthenticated(userNameRefreshToken);
                }
            }
        }
    }

    private async Task HandleGeneral()
    {
        //Message = "Updating general information ...";

        var accessToken = await localStorage.GetItemAsync<string>("accessToken");
        if (!string.IsNullOrEmpty(accessToken))
        {
            if (!string.IsNullOrEmpty(indexPageTitle))
            {
                var indexConfigs = dataSwanShop.Configs.Where(x => !string.IsNullOrEmpty(x.Route) && x.Route == "Index");
                if (indexConfigs.Count() > 0)
                {
                    foreach (var item in indexConfigs)
                    {
                        if (item.Properties != null)
                        {
                            var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                            if (configPageTitle != null)
                                configPageTitle.Value = indexPageTitle;

                            var configShopName = item.Properties.Where(x => x.Name == "ShopName").FirstOrDefault();
                            if (configShopName != null)
                                configShopName.Value = _shopName;

                            var configShopAddress = item.Properties.Where(x => x.Name == "ShopAddress").FirstOrDefault();
                            if (configShopAddress != null)
                                configShopAddress.Value = _shopAddress;

                            var configShopTel = item.Properties.Where(x => x.Name == "ShopTel").FirstOrDefault();
                            if (configShopTel != null)
                                configShopTel.Value = _shopTelephone;

                            var configShopMail = item.Properties.Where(x => x.Name == "ShopMail").FirstOrDefault();
                            if (configShopMail != null)
                                configShopMail.Value = _shopMail;

                            var configShopLinkFacebook = item.Properties.Where(x => x.Name == "ShopLinkFB").FirstOrDefault();
                            if (configShopLinkFacebook != null)
                                configShopLinkFacebook.Value = _shopLinkFacebook;

                            var configShopLinkInstagram = item.Properties.Where(x => x.Name == "ShopLinkIG").FirstOrDefault();
                            if (configShopLinkInstagram != null)
                                configShopLinkInstagram.Value = _shopLinkInstagram;

                            var configShopLinkTwitter = item.Properties.Where(x => x.Name == "ShopLinkTW").FirstOrDefault();
                            if (configShopLinkTwitter != null)
                                configShopLinkTwitter.Value = _shopLinkTwitter;

                            var configShopLinkLinkedIn = item.Properties.Where(x => x.Name == "ShopLinkLI").FirstOrDefault();
                            if (configShopLinkLinkedIn != null)
                                configShopLinkLinkedIn.Value = _shopLinkLinkedIn;
                        }

                        if (item.SpecificIdProperties != null)
                        {
                            var configCarousel = item.SpecificIdProperties.Where(x => x.Id == ClsCommon.IndexCarouselId).FirstOrDefault();
                            if (configCarousel != null && configCarousel.Properties != null && configCarousel.Properties.Count() > 0)
                            {
                                var configCarouselStyle = configCarousel.Properties.Where(x => x.Name == "Style").FirstOrDefault();
                                if (configCarouselStyle != null)
                                    configCarouselStyle.Value = _carouselStyle;

                                var configCarouselShowArrows = configCarousel.Properties.Where(x => x.Name == "ShowArrows").FirstOrDefault();
                                if (configCarouselShowArrows != null)
                                    configCarouselShowArrows.Value = _carouselShowArrows ? "1" : "0";

                                var configCarouselShowBullets = configCarousel.Properties.Where(x => x.Name == "ShowBullets").FirstOrDefault();
                                if (configCarouselShowBullets != null)
                                    configCarouselShowBullets.Value = _carouselShowBullets ? "1" : "0";

                                var configCarouselEnableSwipeGesture = configCarousel.Properties.Where(x => x.Name == "EnableSwipeGesture").FirstOrDefault();
                                if (configCarouselEnableSwipeGesture != null)
                                    configCarouselEnableSwipeGesture.Value = _carouselEnableSwipeGesture ? "1" : "0";

                                var configCarouselAutoCycle = configCarousel.Properties.Where(x => x.Name == "AutoCycle").FirstOrDefault();
                                if (configCarouselAutoCycle != null)
                                    configCarouselAutoCycle.Value = _carouselAutoCycle ? "1" : "0";
                            }
                        }
                    }
                }
            }

            if (!string.IsNullOrEmpty(aboutPageTitle))
            {
                var aboutConfigs = dataSwanShop.Configs.Where(x => !string.IsNullOrEmpty(x.Route) && x.Route == "About");
                if (aboutConfigs.Count() > 0)
                {
                    foreach (var item in aboutConfigs)
                    {
                        if (item.Properties != null)
                        {
                            var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                            if (configPageTitle != null)
                            {
                                configPageTitle.Value = aboutPageTitle;
                                configPageTitle.HasChange = "1";
                            }
                        }
                    }
                }
            }

            if (!string.IsNullOrEmpty(contactPageTitle))
            {
                var contactConfigs = dataSwanShop.Configs.Where(x => !string.IsNullOrEmpty(x.Route) && x.Route == "Contact");
                if (contactConfigs.Count() > 0)
                {
                    foreach (var item in contactConfigs)
                    {
                        if (item.Properties != null)
                        {
                            var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                            if (configPageTitle != null)
                            {
                                configPageTitle.Value = contactPageTitle;
                                configPageTitle.HasChange = "1";
                            }
                        }
                    }
                }
            }

            if (!string.IsNullOrEmpty(shopPageTitle))
            {
                var shopConfigs = dataSwanShop.Configs.Where(x => !string.IsNullOrEmpty(x.Route) && x.Route == "Shop");
                if (shopConfigs.Count() > 0)
                {
                    foreach (var item in shopConfigs)
                    {
                        if (item.Properties != null)
                        {
                            var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                            if (configPageTitle != null)
                            {
                                configPageTitle.Value = shopPageTitle;
                                configPageTitle.HasChange = "1";
                            }
                        }
                    }
                }
            }

            if (!string.IsNullOrEmpty(shopSinglePageTitle))
            {
                var shopSingleConfigs = dataSwanShop.Configs.Where(x => !string.IsNullOrEmpty(x.Route) && x.Route == "ShopSingle");
                if (shopSingleConfigs.Count() > 0)
                {
                    foreach (var item in shopSingleConfigs)
                    {
                        if (item.Properties != null)
                        {
                            var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                            if (configPageTitle != null)
                            {
                                configPageTitle.Value = shopSinglePageTitle;
                                configPageTitle.HasChange = "1";
                            }
                        }
                    }
                }
            }

            try
            {
                var result = await Http.PostAsJsonAsync<SwanShop>($"/api/UpdateData?accessToken={accessToken}", dataSwanShop);
                result.EnsureSuccessStatusCode();

                var contentResult = result.Content.ReadAsStringAsync().Result;
                if (contentResult.Contains("Data updated"))
                    NavigationManager.NavigateTo("/gestion");
            }
            catch (Exception e) { var test = e.Message; }

        }

        //var result = JsonSerializer.Deserialize<BaseResult>(await resultMessage.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        //Message = result.Successful ? "General information updated" : result.Error;
    }
}