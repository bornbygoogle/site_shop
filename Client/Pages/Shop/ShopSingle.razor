@using MudBlazor;
@using BlazorApp.Shared;

@inject HttpClient Http
@inject NavigationManager NavigationManager

@page "/shopitem/{ItemId:long?}"

<PageTitle>@pageTitle</PageTitle>

<!-- Open Content -->
<section class="bg-light">
    <div class="container pb-5">
        <div class="row">
            <div class="col-lg-5 col-md-5 col-sm-12 mt-5">
                <div class="row my-2">
                    @if (!string.IsNullOrEmpty(_displayImage))
                    {
                        <div class="card">
                            <img class="card-img img-fluid m-auto" src="@_displayImage" alt="Card image cap" id="product-detail">
                        </div>
                    }
                </div>
                <div class="row my-2">
                    @if (_listDataCarousel != null && _listDataCarousel.Count() > 0)
                    {
                        <BlazorSlickCarousel @ref="shopSingleCarousel" Configurations="shopSingleConfigurations" Id="slick-carousel-shop-single">
                            <BlazorSlickCarouselContent>

                                @foreach (var item in _listDataCarousel)
                                {
                                    if (!string.IsNullOrEmpty(item.ImageUrl))
                                    {
                                        <div class="col-4 mx-2 carousel-item">
                                            <a href="/shopitem/@ItemId">
                                                <img class="card-img img-fluid m-auto" src="@item.ImageUrl" @onclick="(() => SetDisplayImage(item.ImageUrl))" />
                                            </a>
                                        </div>
                                    }
                                }

                            </BlazorSlickCarouselContent>
                            <BlazorSlickCarouselLoading></BlazorSlickCarouselLoading>
                        </BlazorSlickCarousel>
                    }
                    else
                    {
                        <span>Loading...</span>
                    }
                </div>
            </div>
            <!-- col end -->
            @if (_article != null)
            {
                <div class="col-lg-7 col-md-7 col-sm-12 mt-5">
                    <div class="card">
                        <div class="card-body">
                            <h1 class="h2">@_article.Title</h1>
                            <p class="h3 py-2">€@_article.Price</p>
                            <p class="py-2">
                                <i class="fa fa-star text-warning"></i>
                                <i class="fa fa-star text-warning"></i>
                                <i class="fa fa-star text-warning"></i>
                                <i class="fa fa-star text-warning"></i>
                                <i class="fa fa-star text-secondary"></i>
                                <span class="list-inline-item text-dark">Rating 4.8 | 36 Comments</span>
                            </p>
                            <ul class="list-inline">
                                <li class="list-inline-item">
                                    <h6>Brand:</h6>
                                </li>
                                <li class="list-inline-item">
                                    <p class="text-muted"><strong>Easy Wear</strong></p>
                                </li>
                            </ul>

                            <h6>Description:</h6>
                            <p>@_article.Description</p>
                            <ul class="list-inline">
                                <li class="list-inline-item">
                                    <h6>Avaliable Color :</h6>
                                </li>
                                <li class="list-inline-item">
                                    <p class="text-muted"><strong>@_article.Colors</strong></p>
                                </li>
                            </ul>

                            <h6>Specification:</h6>
                            <ul class="list-unstyled pb-3">
                                @{
                                    if (!string.IsNullOrEmpty(_article.Specification))
                                    {
                                        var listSpec = _article.Specification.Split("/");

                                        if (listSpec != null && listSpec.Count() > 0)
                                        {
                                            foreach(var itemSpec in listSpec)
                                            {
                                                <li>@itemSpec</li>
                                            }
                                        }
                                    }
                                }
                            </ul>

                            @*<form action="" method="GET">
                                <input type="hidden" name="product-title" value="Activewear">
                                <div class="row">
                                    <div class="col-auto">
                                        <ul class="list-inline pb-3">
                                            <li class="list-inline-item">
                                                Size :
                                                <input type="hidden" name="product-size" id="product-size" value="S">
                                            </li>
                                            <li class="list-inline-item"><span class="btn btn-success btn-size">S</span></li>
                                            <li class="list-inline-item"><span class="btn btn-success btn-size">M</span></li>
                                            <li class="list-inline-item"><span class="btn btn-success btn-size">L</span></li>
                                            <li class="list-inline-item"><span class="btn btn-success btn-size">XL</span></li>
                                        </ul>
                                    </div>
                                    <div class="col-auto">
                                        <ul class="list-inline pb-3">
                                            <li class="list-inline-item text-right">
                                                Quantity
                                                <input type="hidden" name="product-quanity" id="product-quanity" value="1">
                                            </li>
                                            <li class="list-inline-item"><span class="btn btn-success" id="btn-minus">-</span></li>
                                            <li class="list-inline-item"><span class="badge bg-secondary" id="var-value">1</span></li>
                                            <li class="list-inline-item"><span class="btn btn-success" id="btn-plus">+</span></li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="row pb-3">
                                    <div class="col d-grid">
                                        <button type="submit" class="btn btn-success btn-lg" name="submit" value="buy">Buy</button>
                                    </div>
                                    <div class="col d-grid">
                                        <button type="submit" class="btn btn-success btn-lg" name="submit" value="addtocard">Add To Cart</button>
                                    </div>
                                </div>
                            </form>*@

                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>
<!-- Close Content -->

<RelatedProducts ItemId="@ItemId"></RelatedProducts>

@code {

    private string _currentUrl = null;

    [Parameter]
    public long? ItemId { get; set; }


    public BlazorSlickCarousel? shopSingleCarousel;
    public WMBSCInitialSettings? shopSingleConfigurations;

    [CascadingParameter(Name = "DataSwanShop")]
    protected SwanShop? data { get; set; }

    private List<SwanShopData> _listDataCarousel = new List<SwanShopData>();

    private string pageTitle = string.Empty;

    private string _displayImage = null;
    private SwanShopArticle _article = null;

    protected override async Task OnInitializedAsync()
    {
        _currentUrl = NavigationManager.Uri.Replace(NavigationManager.BaseUri, string.Empty).ToLower();

        //data = await Http.GetFromJsonAsync<SwanShop>($"/api/GetData");
    }

    protected override void OnParametersSet()
    {
        if (data != null)
        {
            //_displayImage = null;

            if (data.Configs != null && data.Configs.Count > 0)
            {
                var shopSingleConfigs = data.Configs.Where(x => !string.IsNullOrEmpty(x.Route) && x.Route.ToLower() == _currentUrl);
                if (shopSingleConfigs.Count() > 0)
                {
                    foreach (var item in shopSingleConfigs)
                    {
                        if (item.Properties != null && item.Properties.Count > 0)
                        {
                            var configPageTitle = item.Properties.Where(x => x.Name == nameof(PageTitle)).FirstOrDefault();
                            if (configPageTitle != null)
                                pageTitle = configPageTitle.Value;
                        }
                    }
                }
            }

            _article = data.Articles.Where(x => x.Id == ItemId).First();

            if (data.Datas != null && data.Datas.Count > 0)
            {
                var itemDatas = data.Datas.Where(x => x.ArticleId == ItemId).ToList();
                if (itemDatas != null && itemDatas.Count() > 0)
                {
                    if (string.IsNullOrEmpty(_displayImage) && itemDatas.First() != null && !string.IsNullOrEmpty(itemDatas.First().ImageUrl))
                        _displayImage = itemDatas.First().ImageUrl;

                    _listDataCarousel.Clear();
                    _listDataCarousel.AddRange(itemDatas);
                }
            }

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        // to <= 800px screen
        WMBSCSettings breakpoint800Settings = new WMBSCSettings
            {
                slidesToShow = 2,
                arrows = true,
                dots = false
            };
        WMBSCResponsiveSettings breakpoint800Responsive = new WMBSCResponsiveSettings
            {
                breakpoint = 800,
                settings = breakpoint800Settings
            };

        // to <= 400px screen
        WMBSCSettings breakpoint400Settings = new WMBSCSettings
            {
                slidesToShow = 1,
                arrows = true
            };
        WMBSCResponsiveSettings breakpoint400Responsive = new WMBSCResponsiveSettings
            {
                breakpoint = 400,
                settings = breakpoint400Settings
            };

        // add responsivity
        List<WMBSCResponsiveSettings> responsiveSettingsList = new List<WMBSCResponsiveSettings>();
        responsiveSettingsList.Add(breakpoint800Responsive);
        responsiveSettingsList.Add(breakpoint400Responsive);

        // the carousel configurations
        shopSingleConfigurations = new WMBSCInitialSettings
            {
                arrows = true,
                dots = false,
                slidesToShow = 3,
                slidesToScroll = 3,
                infinite = true,
                responsive = responsiveSettingsList,
                centerMode = true,
                adaptiveHeight = true,
                autoplay = true,
                autoplaySpeed = 500,
                touchMove = false
            };
    }

    private void SetDisplayImage(string sImageUrl)
    {
        if (!string.IsNullOrEmpty(sImageUrl))
        {
            _displayImage = sImageUrl;
        }

        StateHasChanged();
    }
}
