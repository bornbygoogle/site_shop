@page "/login"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider authenticationStateProvider;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using BlazorApp.Shared;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;

@*<Link Href="css/top-row.css" Rel="stylesheet" />*@

<!-- Site Title -->
<PageTitle>Login</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-12 mx-auto mt-12 mb-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Please enter your details</h5>
                    <EditForm Model="user" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mt-2 mb-2">
                            <label for="username">Username</label>
                            <InputText Id="username" Class="form-control" @bind-Value="user.UserName" />
                            <ValidationMessage For="@(() => user.UserName)" />
                        </div>
                        <div class="form-group mt-2 mb-2">
                            <label for="password">Password</label>
                            <InputText Id="password" type="password" Class="form-control" @bind-Value="user.Password" />
                            <ValidationMessage For="@(() => user.Password)" />
                        </div>
                        <button type="submit" class="btn btn-primary"><span>Submit</span> <span class="oi oi-account-login" aria-hidden="true"></span></button>
                    </EditForm>
                    @if (ShowErrors)
                    {
                        <div class="alert alert-danger pt-1 mt-10 pb-1 mb-10" role="alert">
                            <p>@Error</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private User user = new User();
    private bool ShowErrors;
    private string Error = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await ((ApiAuthenticationStateProvider)authenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
            NavigationManager.NavigateTo("/gestion");
    }

    private async void HandleLogin()
    {
        ShowErrors = false;

        var result = await Http.GetStringAsync($"/api/Login?userName={user.UserName}&password={user.Password}");

        if (result.StartsWith("ERR|"))
        {
            Error = result.Replace("ERR|", string.Empty);
            ShowErrors = true;

            // Update the UI
            StateHasChanged();
        }
        else
        {
            var res = result.Split("||REF||");
            if (res != null && res.Count() == 2)
            {
                await localStorage.SetItemAsync($"accessToken", res[0]);
                await localStorage.SetItemAsync($"refreshToken", res[1]);

                ((ApiAuthenticationStateProvider)authenticationStateProvider).MarkUserAsAuthenticated(user.UserName);

                //redirect
                NavigationManager.NavigateTo("/gestion", true);
            }
        }
    }
}
